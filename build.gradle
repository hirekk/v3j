/*
 * Copyright (c) 2025 Hieronim Kubica
 * Licensed under the MIT License. See LICENSE file for full terms.
 */

plugins {
    id 'java'
    id 'application'
    id 'com.diffplug.spotless' version '6.25.0'
    id 'jacoco'
}

java {
    sourceCompatibility = JavaVersion.VERSION_24
    targetCompatibility = JavaVersion.VERSION_24
    toolchain {
        languageVersion = JavaLanguageVersion.of(24)
    }
}

sourceSets {
    main.java.srcDirs = ['src']
    test.java.srcDirs = ['test']
}

dependencies {
  implementation 'info.picocli:picocli:4.7.7'
  implementation 'org.apache.commons:commons-math3:3.6.1'
  testImplementation platform('org.junit:junit-bom:5.13.4')
  testImplementation 'org.junit.jupiter:junit-jupiter'
  testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

application {
    mainClass = 'Main'
}

test {
    useJUnitPlatform()
    
    testLogging {
        events = ["failed"]
        exceptionFormat = "full"
        showStackTraces = true
        showStandardStreams = false
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.compilerArgs += ['-Xlint:unchecked']
}

spotless {
    java {
        googleJavaFormat('1.28.0')        
        importOrder('java', 'javax', 'org', 'com', '')
        removeUnusedImports()
        trimTrailingWhitespace()
        endWithNewline()
        licenseHeaderFile 'LICENSE_HEADER'
    }
}

build.dependsOn spotlessApply

jacocoTestReport {
    reports {
        xml.required = true
        html.required = false
    }
    
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                '**/Main.class',
                '**/Main$*.class',
                '**/FuzzyCommand.class',
                '**/TrainCommand.class', 
                '**/ExactCommand.class',
                '**/GenerateCommand.class'
            ])
        }))
    }
}

test.finalizedBy jacocoTestReport

jar {
    archiveBaseName.set('v3j')
    archiveClassifier.set('')
    archiveVersion.set('')
    manifest {
        attributes 'Main-Class': 'Main'
    }
    
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}
